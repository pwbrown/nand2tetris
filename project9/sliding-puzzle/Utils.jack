/*
 * Class   : Utils
 * Purpose : Utility functions for extended math operations and array helpers
 * Author  : Philip Brown
 * Source  : https://github.com/pwbrown/nand2tetris/project9/sliding-puzzle/Utils.jack
 */

class Utils {
    // Modulus Operator (num1 % num2)
    function int mod(int num1, int num2) {
        var int quot;
        let quot = num1 / num2;
        return num1 - (num2 * quot);
    }

    // Returns an array of integers from 0 to 15 shuffled in a random order
    // Uses pre-shuffled strings containing the letters A-P to make generating
    // the final array easier. (NOTE: Used https://codebeautify.org/shuffle-letters to generate shuffled strings)
    // NOTE: I discovered while working on this project that not all 15-puzzles are solvable,
    // so I wrote a helper script in JavaScript that utilizes an existing algorithm to generate random solvable
    // puzzles and auto generate the Jack code block seen below
    // Helper script source: https://github.com/pwbrown/nand2tetris/project9/scripts/generate-solvable-puzzles.js
    function Array randomGridPositions(int seed) {
        var String posString;
        var Array positions;
        var int num, i;
        /*************** Start of Generated Code ****************/
        let num = Utils.mod(seed, 30);
        if (num = 0) { let posString = "LBDOEHNPFICAKJMG"; }
        if (num = 1) { let posString = "JEAIDLHOFGMBCKPN"; }
        if (num = 2) { let posString = "MNIAFHLBDKCOGJPE"; }
        if (num = 3) { let posString = "IBGPEMHKNOFLACDJ"; }
        if (num = 4) { let posString = "CKIEBANLPHGDMFOJ"; }
        if (num = 5) { let posString = "JECMDLAGIBHFPOKN"; }
        if (num = 6) { let posString = "HDALOMJFBCGKIEPN"; }
        if (num = 7) { let posString = "GOHALKCDEFPBMNIJ"; }
        if (num = 8) { let posString = "LOJMFACIDKBHPNGE"; }
        if (num = 9) { let posString = "MJGCBLOKINPDEHAF"; }
        if (num = 10) { let posString = "CBEALIGHFJPNMKDO"; }
        if (num = 11) { let posString = "LOKMAPDHJCIEGBNF"; }
        if (num = 12) { let posString = "NGIKELFAJOBHCDPM"; }
        if (num = 13) { let posString = "JFEAKBCOGHPLDIMN"; }
        if (num = 14) { let posString = "PNBCIOLKJFMADGHE"; }
        if (num = 15) { let posString = "BHJAKMLGINCOEDPF"; }
        if (num = 16) { let posString = "BMIJOLEDFGCAHPKN"; }
        if (num = 17) { let posString = "EGHINLDFBJCOPAMK"; }
        if (num = 18) { let posString = "ALDOEFIGBKMHNJPC"; }
        if (num = 19) { let posString = "EDPJLHIONKAMFCGB"; }
        if (num = 20) { let posString = "BNOMLHPGDKJACFEI"; }
        if (num = 21) { let posString = "HLONKIACJMBFGPDE"; }
        if (num = 22) { let posString = "LCPFMEBAJDKHOGIN"; }
        if (num = 23) { let posString = "BNMDOIFEHCLJGKPA"; }
        if (num = 24) { let posString = "CMOAHDKFGEBILJNP"; }
        if (num = 25) { let posString = "MDIFJPEOHKCGBANL"; }
        if (num = 26) { let posString = "KCGEOPAJMIDNLFBH"; }
        if (num = 27) { let posString = "CNEOKBHJLDIMFPAG"; }
        if (num = 28) { let posString = "CFPOJKNBDEMAHGIL"; }
        if (num = 29) { let posString = "CMALKGNBEHIODFJP"; }
        /**************** End of Generated Code ****************/
        // Fill position array with char int values
        let positions = Array.new(16);
        let i = 0;
        while (i < 16) {
            let positions[i] = posString.charAt(i) - 65; // 65 is the int associated with A
            let i = i + 1;
        }
        do posString.dispose();
        return positions;
    }

    // Get the sum of all character numbers in a string
    function int stringToCharSum(String input) {
        var int i, sum;
        let i = 0;
        let sum = 0;
        while (i < input.length()) {
            let sum = sum + input.charAt(i);
            let i = i + 1;
        }
        return sum;
    }

    // Behaves similarly to how the DOM keyup even works
    // Waits for a key to be pressed, and then waits for it to be released
    // before returning the key value
    function char onKeyUp() {
        var char waitKey, finalKey;

        // Wait for key to be pressed
        while (waitKey = 0) {
            let waitKey = Keyboard.keyPressed();
        }

        let finalKey = waitKey;

        // Wait for no key to be pressed
        while (~(waitKey = 0)) {
            let waitKey = Keyboard.keyPressed();
        }
        return finalKey;
    }
}