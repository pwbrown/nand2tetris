/**
 * Jack OS : Output
 * Author  : Philip Brown
 * Source  : https://github.com/pwbrown/nand2tetris/n2t/os/Output.jack
 * 
 * My implementation of the Jack OS Output class for Nand2Tetris project 12
 */

class Output {
    static Array charMaps, screen;
    static int mapIndex, cursorRow, cursorCol;

    /**
     * Initialize the output class static variables
     */
    function void init() {        
        /** Setup screen info */
        let screen = 16384; // screen base address

        /** Position the cursor */
        let cursorRow = 0;
        let cursorCol = 0;

        /** Setup the character bit maps */
        let charMaps = Array.new(96); // Enough space to fit all printable ASCII characters and black square
        let mapIndex = 0;

        do Output.appendMap(63,63,63,63,63,63,63,63,63,0);  // BLACK SQUARE
        do Output.appendMap(0,0,0,0,0,0,0,0,0,0);           // (SPACE)
        do Output.appendMap(12,30,30,30,12,12,0,12,12,0);   // !
        do Output.appendMap(54,54,20,0,0,0,0,0,0,0);        // "
        do Output.appendMap(0,18,18,63,18,18,63,18,18,0);   // #
        do Output.appendMap(12,30,51,3,30,48,51,30,12,12);  // $
        do Output.appendMap(0,0,35,51,24,12,6,51,49,0);     // %
        do Output.appendMap(12,30,30,12,54,27,27,27,54,0);  // &
        do Output.appendMap(12,12,6,0,0,0,0,0,0,0);         // '
        do Output.appendMap(24,12,6,6,6,6,6,12,24,0);       // (
        do Output.appendMap(6,12,24,24,24,24,24,12,6,0);    // )
        do Output.appendMap(0,0,0,51,30,63,30,51,0,0);      // *
        do Output.appendMap(0,0,0,12,12,63,12,12,0,0);      // +
        do Output.appendMap(0,0,0,0,0,0,0,12,12,6);         // ,
        do Output.appendMap(0,0,0,0,0,63,0,0,0,0);          // -
        do Output.appendMap(0,0,0,0,0,0,0,12,12,0);         // .
        do Output.appendMap(0,0,32,48,24,12,6,3,1,0);       // /
        do Output.appendMap(12,30,51,51,51,51,51,30,12,0);  // 0
        do Output.appendMap(12,14,15,12,12,12,12,12,63,0);  // 1
        do Output.appendMap(30,51,48,24,12,6,3,51,63,0);    // 2
        do Output.appendMap(30,51,48,48,28,48,48,51,30,0);  // 3
        do Output.appendMap(16,24,28,26,25,63,24,24,60,0);  // 4
        do Output.appendMap(63,3,3,31,48,48,48,51,30,0);    // 5
        do Output.appendMap(28,6,3,3,31,51,51,51,30,0);     // 6
        do Output.appendMap(63,49,48,48,24,12,12,12,12,0);  // 7
        do Output.appendMap(30,51,51,51,30,51,51,51,30,0);  // 8
        do Output.appendMap(30,51,51,51,62,48,48,24,14,0);  // 9
        do Output.appendMap(0,0,12,12,0,0,12,12,0,0);       // :
        do Output.appendMap(0,0,12,12,0,0,12,12,6,0);       // ;
        do Output.appendMap(0,0,24,12,6,3,6,12,24,0);       // <
        do Output.appendMap(0,0,0,63,0,0,63,0,0,0);         // =
        do Output.appendMap(0,0,3,6,12,24,12,6,3,0);        // >
        do Output.appendMap(30,51,51,24,12,12,0,12,12,0);   // ?
        do Output.appendMap(30,51,51,59,59,59,27,3,30,0);   // @
        do Output.appendMap(12,30,51,51,63,51,51,51,51,0);  // A
        do Output.appendMap(31,51,51,51,31,51,51,51,31,0);  // B
        do Output.appendMap(28,54,35,3,3,3,35,54,28,0);     // C
        do Output.appendMap(15,27,51,51,51,51,51,27,15,0);  // D
        do Output.appendMap(63,51,35,11,15,11,35,51,63,0);  // E
        do Output.appendMap(63,51,35,11,15,11,3,3,3,0);     // F
        do Output.appendMap(28,54,35,3,59,51,51,54,44,0);   // G
        do Output.appendMap(51,51,51,51,63,51,51,51,51,0);  // H
        do Output.appendMap(30,12,12,12,12,12,12,12,30,0);  // I
        do Output.appendMap(60,24,24,24,24,24,27,27,14,0);  // J
        do Output.appendMap(51,51,51,27,15,27,51,51,51,0);  // K
        do Output.appendMap(3,3,3,3,3,3,35,51,63,0);        // L
        do Output.appendMap(33,51,63,63,51,51,51,51,51,0);  // M
        do Output.appendMap(51,51,55,55,63,59,59,51,51,0);  // N
        do Output.appendMap(30,51,51,51,51,51,51,51,30,0);  // O
        do Output.appendMap(31,51,51,51,31,3,3,3,3,0);      // P
        do Output.appendMap(30,51,51,51,51,51,63,59,30,48); // Q
        do Output.appendMap(31,51,51,51,31,27,51,51,51,0);  // R
        do Output.appendMap(30,51,51,6,28,48,51,51,30,0);   // S
        do Output.appendMap(63,63,45,12,12,12,12,12,30,0);  // T
        do Output.appendMap(51,51,51,51,51,51,51,51,30,0);  // U
        do Output.appendMap(51,51,51,51,51,30,30,12,12,0);  // V
        do Output.appendMap(51,51,51,51,51,63,63,63,18,0);  // W
        do Output.appendMap(51,51,30,30,12,30,30,51,51,0);  // X
        do Output.appendMap(51,51,51,51,30,12,12,12,30,0);  // Y
        do Output.appendMap(63,51,49,24,12,6,35,51,63,0);   // Z
        do Output.appendMap(30,6,6,6,6,6,6,6,30,0);         // [
        do Output.appendMap(0,0,1,3,6,12,24,48,32,0);       // \
        do Output.appendMap(30,24,24,24,24,24,24,24,30,0);  // ]
        do Output.appendMap(8,28,54,0,0,0,0,0,0,0);         // ^
        do Output.appendMap(0,0,0,0,0,0,0,0,0,63);          // _
        do Output.appendMap(6,12,24,0,0,0,0,0,0,0);         // `
        do Output.appendMap(0,0,0,14,24,30,27,27,54,0);     // a
        do Output.appendMap(3,3,3,15,27,51,51,51,30,0);     // b
        do Output.appendMap(0,0,0,30,51,3,3,51,30,0);       // c
        do Output.appendMap(48,48,48,60,54,51,51,51,30,0); // d
        do Output.appendMap(0,0,0,30,51,63,3,51,30,0);     // e
        do Output.appendMap(28,54,38,6,15,6,6,6,15,0);     // f
        do Output.appendMap(0,0,30,51,51,51,62,48,51,30);  // g
        do Output.appendMap(3,3,3,27,55,51,51,51,51,0);    // h
        do Output.appendMap(12,12,0,14,12,12,12,12,30,0);  // i
        do Output.appendMap(48,48,0,56,48,48,48,48,51,30); // j
        do Output.appendMap(3,3,3,51,27,15,15,27,51,0);    // k
        do Output.appendMap(14,12,12,12,12,12,12,12,30,0); // l
        do Output.appendMap(0,0,0,29,63,43,43,43,43,0);    // m
        do Output.appendMap(0,0,0,29,51,51,51,51,51,0);    // n
        do Output.appendMap(0,0,0,30,51,51,51,51,30,0);    // o
        do Output.appendMap(0,0,0,30,51,51,51,31,3,3);     // p
        do Output.appendMap(0,0,0,30,51,51,51,62,48,48);   // q
        do Output.appendMap(0,0,0,29,55,51,3,3,7,0);       // r
        do Output.appendMap(0,0,0,30,51,6,24,51,30,0);     // s
        do Output.appendMap(4,6,6,15,6,6,6,54,28,0);       // t
        do Output.appendMap(0,0,0,27,27,27,27,27,54,0);    // u
        do Output.appendMap(0,0,0,51,51,51,51,30,12,0);    // v
        do Output.appendMap(0,0,0,51,51,51,63,63,18,0);    // w
        do Output.appendMap(0,0,0,51,30,12,12,30,51,0);    // x
        do Output.appendMap(0,0,0,51,51,51,62,48,24,15);   // y
        do Output.appendMap(0,0,0,63,27,12,6,51,63,0);     // z
        do Output.appendMap(56,12,12,12,7,12,12,12,56,0);  // {
        do Output.appendMap(12,12,12,12,12,12,12,12,12,0); // |
        do Output.appendMap(7,12,12,12,56,12,12,12,7,0);   // }
        do Output.appendMap(38,45,25,0,0,0,0,0,0,0);       // ~

        return;
    }

    /**
     * Move the cursor to a specific row and column.
     */
    function void moveCursor(int row, int col) {
        // Update cursor position
        let cursorRow = row;
        let cursorCol = col;

        // Negative column should wrap back from the end of the previous row
        if (cursorCol < 0) {
            let cursorCol = 64 + cursorCol; // 64 = chars_per_row
            let cursorRow = cursorRow - 1;
        }
        // Overflow column should move to the start of the next row
        if (cursorCol > 63) { // 63 = max_col_index
            let cursorCol = cursorCol - 64; // 64 = chars_per_row
            let cursorRow = cursorRow + 1;
        }
        // Negative row should wrap around to the last row
        if (cursorRow < 0) {
            let cursorRow = 23 + cursorRow;
        }
        // Overflow row should move to the first row
        if (cursorRow > 22) { // 22 = max_row_index
            let cursorRow = cursorRow - 23; // 23 = max_rows
        }

        return;
    }

    /**
     * Print a single character to the screen and move the cursor forward by 1
     */
    function void printChar(char c) {
        var Array map;
        var int screenIndex, rowIndex, colAnd1, bitMask, screenValue;

        /** Revert to the black square if a character is not printable */
        if ((c < 32) | (c > 126)) {
            let c = 31;
        }

        /** Get the character bit map */
        let map = charMaps[c - 31]; // map is zero-indexed with the black space as the first item (so ascii char 32 will be in position 1)

        /** Establish base screen index */
        let screenIndex = (cursorRow * 11 * 32) + (cursorCol / 2); // 11 = char_height, 32 = words_per_row, 2 = chars_per_word
        
        /** Pre-calculate col evaluation (0 if col is even and 1 if col is odd) */
        let colAnd1 = cursorCol & 1;

        /** Iterate through map to clear existing pixels, and print new ones */
        let rowIndex = 0;
        while (rowIndex < 11) { // 11 = char_height
            let bitMask = map[rowIndex];
            let screenValue = screen[screenIndex];
            if (colAnd1 = 0) {
                let screenValue = screenValue & -256 | bitMask; // "& -256" will clear the first 8 bits only
            } else {
                let screenValue = screenValue & 255 | (bitMask * 256); // "& 255" will clear the last 8 bits only, "* 256" = << 8 or "* 2 ^ 8"
            }
            let screen[screenIndex] = screenValue;

            /** Iterate indexes */
            let rowIndex = rowIndex + 1;
            let screenIndex = screenIndex + 32; // 32 = words_per_row
        }

        /** Move cursor 1 to the right (use builtin function to handle wrapping) */
        do Output.moveCursor(cursorRow, cursorCol + 1);

        return;
    }

    /**
     * Prints a string to the output one character at a time
     */
    function void printString(String s) {
        var int i, len;
        let i = 0;
        let len = s.length();
        while (i < len) {
            /** Reuse printChar function */
            do Output.printChar(s.charAt(i));
            let i = i + 1;
        }
        return;
    }

    /**
     * Prints an integer to the screen
     */
    function void printInt(int i) {
        var String intStr;
        /** Convert the integer into a string */
        let intStr = String.new(6); // 6 is the maximum integer digit length including the sign
        do intStr.setInt(i);
        /** Reuse printString function */
        do Output.printString(intStr);
        return;
    }

    /**
     * Sets the cursor to the beginning of the next line
     */
    function void println() {
        do Output.moveCursor(cursorRow + 1, 0);
        return;
    }

    /**
     * Moves the cursor back one column (calls moveCursor to handle text wrapping)
     */
    function void backSpace() {
        do Output.moveCursor(cursorRow, cursorCol - 1);
        return;
    }

    /**
     * Appends a bit map to char maps static variable.
     * None of the characters touch the last row in the bit map, so we will
     * just assume that it is 0. If not, then I will add the last argument
     * back in
     */
    function void appendMap(int a, int b, int c, int d, int e, int f, int g, int h, int i, int j) {
        var Array map;

        /** Create a bit map for the height of the character (11 pixels) */
        let map = Array.new(11);
        let charMaps[mapIndex] = map;

        let map[0] = a;
        let map[1] = b;
        let map[2] = c;
        let map[3] = d;
        let map[4] = e;
        let map[5] = f;
        let map[6] = g;
        let map[7] = h;
        let map[8] = i;
        let map[9] = j;
        let map[10] = 0; // Always 0 for now

        /** Increment index for the next map */
        let mapIndex = mapIndex + 1;

        return;
    }
}