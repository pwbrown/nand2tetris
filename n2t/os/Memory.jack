/**
 * Jack OS : Memory
 * Author  : Philip Brown
 * Source  : https://github.com/pwbrown/nand2tetris/n2t/os/Memory.jack
 * 
 * My implementation of the Jack OS Memory class for Nand2Tetris project 12
 */

class Memory {
    static Array ram, freeList;
    static boolean fragmented;

    /**
     * Initialize the Memory class' static values
     */
    function void init() {
        // Fill in base addresses for memory and heap (freeList)
        let ram = 0; // Sets the base address of the entire ram
        
        // Set the current pointer for the freeList to the start of the heap
        let freeList = 2048;
        
        // Set the next segment and block sizes
        let freeList[0] = null;
        let freeList[1] = 14334; // (data_memory_size - heap_base - overhead) = (16384 - 2048 - 2)

        // Keeps track of the fragmented state of memory
        // Any call to deAlloc can put the memory into a "fragmented" state
        // and we will use this flag to call defrag anytime an alloc call fails.
        // Once defrag is called, the memory is considered NOT framgmened so if
        // the retried alloc attempt still fails, we can throw an error instead of
        // running an infinite alloc -> defrag loop :D
        let fragmented = false;

        return;
    }

    /**
     * Peek at a value in memory
     */
    function int peek(int address) {
        return ram[address];
    }

    /**
     * Poke/set a value in memory at the given address
     */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /**
     * Searches for a block within the free list to allocate
     */
    function Array alloc(int size) {
        var Array prev, curr, next;
        var int allocSize, currSize;

        // Make sure that the free list is not empty
        if (freeList = null) {
            do Sys.error(5);
            return 0;
        }

        let allocSize = size + 2; // Includes overhead

        let prev = null;
        let curr = freeList;

        // Locate the first (first fit) available segment that is large enough
        while (true) {
            let currSize = curr[1];
            // Check if the current segment is exactly the right size with or without overhead
            // size <= currSize <= allocSize
            // this means that a reused segment can have up to 2 unused words, but I'm fine with that
            if ((~(currSize < size)) & (~(currSize > allocSize))) {
                let next = curr[0];
                // Attempt to point the previous segment at the next segment
                if ((~(prev = null)) & (~(next = null))) {
                    let prev[0] = next;
                }
                // Move the free list to the start of the next segment if the current was the start of the free list
                if (prev = null) {
                    let freeList = next;
                }
                // Nullify the segment pointer (no need to set size since it's already correct)
                let curr[0] = null;
                return curr + 2;
            }
            // Check if the current segment is large enough to allocate
            if (currSize > allocSize) {
                // Slice off a block from the end of the segment
                let currSize = currSize - allocSize;
                let curr[1] = currSize;
                // Move the segment to the new allocated space and set overhead
                let curr = curr + 2 + currSize;
                let curr[0] = null;
                let curr[1] = size;
                // Return the base address of the allocated segment's block
                return curr + 2;
            }
            // Increment to the next segment
            let prev = curr;
            let curr = curr[0];
            if (curr = null) {
                // There is not enough space to allocate the new block
                if (fragmented) {
                    // Attempt to defrag the memory before retrying the allocation
                    do Memory.defrag();
                    return Memory.alloc(size);
                } else {
                    // Memory is already defragmented, so throw a fatal error
                    do Sys.error(5);
                    return 0;
                }
            }
        }

        return null;
    }

    /**
     * Deallocates an object from memory and inserts the segment into the free list
     * in memory address order to facilitate defragging
     */
    function void deAlloc(Array obj) {
        var Array prev, curr, next, objSeg;
        var boolean loop;

        let prev = null;
        let curr = freeList;
        let objSeg = obj - 2; // move to the start of the object segment overhead

        let loop = true;
        while(loop) {
            // Insert the segment before the current segment if address comes before
            if (objSeg < curr) {
                let objSeg[0] = curr;
                if (prev = null) {
                    // Deallocated segment becomes the start of the free list
                    let freeList = objSeg;
                } else {
                    // Previous item now points to the deallocated segment
                    let prev[0] = objSeg;
                }
                let loop = false;
            } else {
                let next = curr[0];
                if (next = null) {
                    // Append obj segment to the end of the free list
                    let curr[0] = objSeg;
                    let loop = false;
                } else {
                    // Move to the next segment
                    let prev = curr;
                    let curr = next;
                }
            }
        }

        // Once deAlloc has finished, consider the memory "fragmented"
        let fragmented = true;
        return;
    }

    /**
     * Defrags the memory by merging free list segments where possible
     */
    function void defrag() {
        var Array curr, next;
        var int currSize;
        var boolean loop;

        let curr = freeList;

        // Start defragging the freelist
        let loop = true;
        while (loop) {
            let next = curr[0];
            // End the loop if a next segment is not found
            if (next = null) {
                let loop = false;
            } else {
                let currSize = curr[1];
                // Merge if the end of the current segment matches the beginning of the next
                if ((curr + 2 + currSize) = next) {
                    let curr[0] = next[0]; // point current after next
                    let curr[1] = currSize + next[1] + 2; // Add the next segment's size and overhead (2) to the current segment's size
                    // We want to keep the current segment the same until we have finished merging all segments so do nothing here
                } else {
                    // Next segment is not connected, so move current forward to repeat the process
                    let curr = next;
                }
            }
        }

        // Update the framented flag
        let fragmented = false;
        return;
    }
}